<?xml version="1.0" encoding="UTF-8"?>
<library> 

<class name="dataCarrierItem" extends="baseContentListItem" showhandcursor="false"> 

    <attribute name="obj" value="null" />
    <attribute name="diagramObjectId" value="0" type="number" />
    <attribute name="dataCarrierName" value="" type="string" />
    
    <handler name="ondblclick">
        if ($debug) Debug.write("ondblcick: ",this);
    </handler>

    <turnOverTextItem text="$once{ parent.diagramObjectId }" width="130" />
    <turnOverTextItem text="$once{ parent.dataCarrierName }" width="236" />
    <turnOverTextItem width="20">
        <view resource="whiteboard_item_delete">
            <handler name="onclick">
                parent.parent.destroy();
                parent.parent.parent.parent.parent.updateBaseObject();
            </handler>
        </view>
    </turnOverTextItem>
    
    
    <!--
    <labelTooltip text="$once{ canvas.getLabelName(810) + 
        parseDateToStringTime(parent.obj.diagramObject.inserted) }" />
     -->

</class>

<class name="dataCarrierItems" extends="view" y="20" x="16" width="${ parent.width-16 }" >
    
    <attribute name="baseObject" value="null" />
    <attribute name="diagramObjectId" value="0" type="number" />
    <attribute name="baseObjectItemIndex" value="10" type="number" />
    
    <handler name="oninit">
        this.addHeaderItem(831,130);
        this.addHeaderItem(832,236);
        this.addHeaderItem(833,20);
    </handler>
    
    <method name="doInitNewItemList" args="baseObject,diagramObjectId,baseObjectItemIndex">
        <![CDATA[
            this.baseObject = baseObject;
            this.diagramObjectId = diagramObjectId;
            this.baseObjectItemIndex = baseObjectItemIndex;
            if ($debug) Debug.write("this.baseObject: ",this.baseObject);
            var dataCarrierList = this.baseObject[this.baseObject.length-this.baseObjectItemIndex];
            if ($debug) Debug.write("dataCarrierList: ",dataCarrierList);
            for (var i=0;i<dataCarrierList.length;i++) {
                this.addDiagramObject(dataCarrierList[i].diagramObjectId,dataCarrierList[i].dataCarrierName);
            }
        ]]>
    </method>
    
    <event name="onclickedItem" />
    
    <method name="clearList">
        this._innerlist._inn._inn.destroy();
        new lz.innerList(this._innerlist._inn,{name:'_inn'});
    </method>
    
    <method name="addHeaderItem" args="labelid,width" >
        new lz.turnOverListHeaderItem(this._innerlisthead._inn,{
                labelid:labelid,width:width,
                subviewsid:this._innerlisthead._inn.subviews.length
            });
    </method>    
    
    <method name="addAndUpdate" args="dataCarrierDiagramObjectId,dataCarrierName">
        this.addDiagramObject(dataCarrierDiagramObjectId,dataCarrierName);
        this.updateBaseObject();
    </method>
    
    <method name="addDiagramObject" args="dataCarrierDiagramObjectId,dataCarrierName">
        if ($debug) Debug.write("this.baseObject: ",this.baseObject);
        new lz.dataCarrierItem(this._innerlist._inn._inn,{
                diagramObjectId:dataCarrierDiagramObjectId,
                dataCarrierName:dataCarrierName
            });
    </method>
    
    <method name="updateBaseObject">
        <![CDATA[
            var dataCarrierList = new Array();
            for (var i=0;i<this._innerlist._inn._inn.subviews.length;i++) {
                var item = this._innerlist._inn._inn.subviews[i];
                dataCarrierList.push({diagramObjectId:item.diagramObjectId,dataCarrierName:item.dataCarrierName});
            }
	        canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.
	                updateBaseactionobjectDataCarrierByNameAndIndex(this.baseObject[this.baseObject.length-1],
                        this.baseObjectItemIndex,dataCarrierList);
        ]]>
    </method> 
    
    <method name="sendWidthUpdate" args="w,subviewsid" >
        <![CDATA[
        ////Debug.write(w,subviewsid,this._innerlist._inn);
        for (var i=0;i<this._innerlist._inn._inn.subviews.length;i++){
            this._innerlist._inn._inn.subviews[i].subviews[subviewsid].setAttribute('width',w);
        }
        ]]>
    </method>    
    <!-- 
    <labelText x="0" labelid="818" />   
     --> 
    
    <view x="${ parent.parent.parent.width - 38 }" y="2"
          resource="edit_add_rsc" onmouseover="" onmouseout="">
        <handler name="onclick">
            new lz.datacarrierExplorer(canvas.currentDiagramRef,{
                    name:'_datacarrierExplorer',refObj:parent
                });
        </handler>
        <labelTooltip labelid="819" />
    </view>
    
    <!-- =========  List Header area  =========-->

    <view name="_innerlisthead" height="20" width="${ parent._innerlist.width }" 
        x="${ parent._innerlist.x }" y="20" clip="true">
        <view name="_inn" layout="axis:x;spacing:0" />
    </view> 
    
    <!-- =========  List Contents area  =========-->
    <view name="_innerlist" height="140" x="0" width="${ parent.width }"
        y="40" clip="true">
        <view name="_inn" >
            <innerList name="_inn" />
        </view>
        <vscrollbar name="_scrollbar" />
        <hscrollbar />
    </view>    
    
    <!--
    <view x="80" y="20" name="_infoContent" height="100" clip="true"
          width="${ parent.width-80 }" bgcolor="0xDDDDDD">
        <view name="_inner" layout="axis:y;spacing:2">
            
        </view>
        <vscrollbar name="_scrollbar" />
    </view>
     -->
</class>

<class name="dataCarrierItemsSidebar" extends="sideBarPod" labelid="826"
      iconName="icon_datacarriers_inspector" contentHeight="180" contentY="20">
    
    <attribute name="selectedObj" value="null" />
    <attribute name="baseObject" value="null" />
    
    <method name="setObjectSelectedObj" args="objRef,baseObject,diagramObjectId">
        <![CDATA[   
            //init content if not inited yet
            this.checkContentInitHidden();
            this.selectedObj = objRef;
            this.baseObject = baseObject;
            var currentDrawArea = canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard;
            
            this.content.clearList();
            
            //Load Data Carrier Module
            if (this.baseObject[0] == "inputflow" 
                    || this.baseObject[0] == "outputflow"
                    || this.baseObject[0] == "activity") {
                this.content.doInitNewItemList(this.baseObject,diagramObjectId,10);
            } else if (this.baseObject[0] == "unit" || this.baseObject[0] == "unitFixed" 
                    || this.baseObject[0] == "departement" || this.baseObject[0] == "departementFixed" 
                    || this.baseObject[0] == "company" || this.baseObject[0] == "companyFixed") {
                if (currentDrawArea.diagramType == 2 || currentDrawArea.diagramType == 4) {
                    this.content.doInitNewItemList(this.baseObject,diagramObjectId,12);
                } else {
                    this.content.doInitNewItemList(this.baseObject,diagramObjectId,9);
                }
            } else if (this.baseObject[0] == "process" || this.baseObject[0] == "processtree") {
                if (currentDrawArea.diagramType == 2 || currentDrawArea.diagramType == 4) {
                    this.content.doInitNewItemList(this.baseObject,diagramObjectId,10);
                } else {
                    this.content.doInitNewItemList(this.baseObject,diagramObjectId,9);
                }
            } else if (this.baseObject[0] == "processgroup") {
                this.content.doInitNewItemList(this.baseObject,diagramObjectId,9);
            } else {
                if ($debug) Debug.write("No DataCarrier for this this.baseObject[0]: ",this.baseObject[0]);
            }
        
        ]]>
    </method>
    
    <method name="checkContentInitHidden">
        if (!this.contentIsInited){
            new lz.dataCarrierItems(this,{name:'content',visibility:'hidden'});
            this.contentIsInited = true;
        }
    </method>    

    <handler name="contentInit" >
        new lz.dataCarrierItems(this,{name:'content'});
    </handler>
    
    <!--
    <dataCarrierItems y="20" name="content" x="10"
                      width="${parent.width - 10 }" />
     -->
</class>

</library>
