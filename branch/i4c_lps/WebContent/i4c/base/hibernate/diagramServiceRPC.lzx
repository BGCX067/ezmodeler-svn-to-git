<?xml version="1.0" encoding="UTF-8" ?>
<library>

	<security>
        <allow>
            <pattern>^org.i4change.app.http.javarpc\.DiagramServiceRPC</pattern>
        </allow>
    </security>
    
    <!-- See WEB-INF/classes/TypesExample.java for java source. -->
    <javarpc name="diagramServiceRPC" scope="webapp" secure="$once{ canvas.javaRPCSecure }" secureport="$once{ canvas.httpport }"
    		 autoload="false" objectreturntype="javabean"
    		 remoteclassname="org.i4change.app.http.javarpc.DiagramServiceRPC">

        <handler name="onload">
            // Set buttons visible only after JavaRPC object loads
            if ($debug) Debug.write('onload:', this);
            downloadServiceRPC.load();
        </handler>

        <handler name="ondata" args="res">
            if ($debug) Debug.write('(types ondata) response is:', res);
        </handler>

        <handler name="onerror" args="errmsg">
            if ($debug) Debug.write('(types onerror) error:', errmsg);
            new lz.errorPopup(canvas,{error:errmsg});
        </handler>
        
        <method name="loadLatestDiagramByIdAndObject" args="diagramId,diagram">
	        this.currentDiagram = diagram;
	        this.getLatestDiagramObjectsById.diagramId = diagramId;
	        this.getLatestDiagramObjectsById.doCall();
	    </method>
	    
	     <netRemoteCallRPC name="getLatestDiagramObjectsById" funcname="getLatestDiagramObjectsById" >      
	        <attribute name="diagramId" value="" type="string" />
	        <netparam><method name="getValue">return canvas.sessionId; </method></netparam>
	        <netparam><method name="getValue">return parent.diagramId;</method></netparam> 
	        <netparam><method name="getValue">return canvas.currentdomainObj.organisation_id;</method></netparam>
	        <handler name="ondata" args="value">
	            if ($debug) Debug.write("getLatestDiagramObjectsById: ",value);
	            parent.loadDiagram(value);
	        </handler>
	    </netRemoteCallRPC>  
	    
	     <method name="loadDiagram" args="value">
	        if ($debug) Debug.write("loadDiagram: ",this.currentDiagram);
	        
	        canvas.currentDiagram = this.currentDiagram;
	        canvas.currentInstanceList = value;
	        
	        if (this.currentDiagram.diagramType.diagramTypeId == 1) {
	            quicklinkAct('processgroup');
	        } else if (this.currentDiagram.diagramType.diagramTypeId == 2) {
	            quicklinkAct('roleView');
	        } else if (this.currentDiagram.diagramType.diagramTypeId == 3) {
	            quicklinkAct('hierarchical');
	        } else if (this.currentDiagram.diagramType.diagramTypeId == 4) {
	            quicklinkAct('singleRole');
	        }
	        this.onopen.sendEvent();
	    </method> 
	    
	    <netRemoteCallRPC name="getDiagramDrillDownByDiagramObjectIdAndType" 
                      funcname="getDiagramDrillDownByDiagramObjectIdAndType" >
            <attribute name="diagramObjectId" value="0" type="number" />
            <!--
            <attribute name="diagramTypeId" value="0" type="number" />
             -->
            <method name="checkAndLoadDiagram" args="dObject">
                this.diagramObjectId = dObject;
                //this.diagramTypeId = dType;
                this.doCall();
            </method>
            <netparam><method name="getValue">return canvas.sessionId;</method></netparam>
            <netparam><method name="getValue">return canvas.currentdomainObj.organisation_id;</method></netparam>
            <netparam><method name="getValue">return parent.diagramObjectId;</method></netparam>
            <!--
            <netparam><method name="getValue">return parent.diagramTypeId;</method></netparam>
             -->
            <handler name="ondata" args="value">
                <![CDATA[
                    //The onResult-Handler will be called be the rtmpconnection
                    if ($debug) Debug.write("getDiagramDrillDownByDiagramObjectIdAndType: ",value);
                    if (value == null){
                        //Make new
                        if ($debug) Debug.write("Make new ",this.diagramObjectId);
                        
                        var baseObject =  canvas.tempNewlyCreatedBaseObject;
                        if (baseObject[0] == "process" || baseObject[0] == "processtree") {
                            canvas.currentDrillDownType = "process";
                            new lz.drillDownChooseBoxProcess(canvas,{
                                        diagramObjectId:this.diagramObjectId,
                                        x:canvas.getMouse('x'),y:canvas.getMouse('y')
                                    });
                        } else if (baseObject[0] == "processgroup") {
                            
                            canvas.currentDiagram = null;
                             canvas.isTempNewlyCreated = true;
                             canvas.isTempNewlyCreatedMainDiagram = true;                        
                            canvas.currentDrillDownType = "processgroup";
                             canvas.tempParentDiagramObjectId = this.diagramObjectId;
                            
                            if ($debug) Debug.write("Make new Process Diagram by " +
                                            "currentDrillDownType ",canvas.currentDrillDownType);
                                            
                            if ($debug) Debug.write("Make new Process Diagram");
                            quicklinkAct('processgroup');
                            
                        } else if (baseObject[0] == "departement" || baseObject[0] == "departementFixed") {
                            
                            canvas.currentDiagram = null;
                             canvas.isTempNewlyCreated = true;
                             canvas.isTempNewlyCreatedMainDiagram = true;                        
                            canvas.currentDrillDownType = "departement";
                             canvas.tempParentDiagramObjectId = this.diagramObjectId;
                            
                            if ($debug) Debug.write("Make new Org-Tree Diagram by " +
                                            "currentDrillDownType ",canvas.currentDrillDownType);
                                            
                            if ($debug) Debug.write("Make new Org-Tree Diagram");
                            quicklinkAct('hierarchical');
                            
                        } else if (baseObject[0] == "company" || baseObject[0] == "companyFixed") {
                            
                            canvas.currentDiagram = null;
                             canvas.isTempNewlyCreated = true;
                             canvas.isTempNewlyCreatedMainDiagram = true;                        
                            canvas.currentDrillDownType = "company";
                             canvas.tempParentDiagramObjectId = this.diagramObjectId;
                            
                            if ($debug) Debug.write("Make new Org-Tree Diagram by " +
                                            "currentDrillDownType ",canvas.currentDrillDownType);
                                            
                            if ($debug) Debug.write("Make new Org-Tree Diagram");
                            quicklinkAct('hierarchical');
                            
                        } else {
                            new lz.errorPopup(canvas,{error:"Unkown baseObject[0] typeOfObject: "+baseObject[0],closable:true});
                        }
                        
                    } else {
                        //Open existing
                        if ($debug) Debug.write("Open existing");
                        parent.loadLatestDiagramByIdAndObject(value.diagramId,value);
                    }
                ]]>
            </handler>  
        </netRemoteCallRPC> 
        
        
    </javarpc>

</library>
