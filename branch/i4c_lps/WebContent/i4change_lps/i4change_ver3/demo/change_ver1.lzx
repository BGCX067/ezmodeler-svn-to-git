<canvas width="100%" height="100%" debug="false" bgcolor="0x808080">


  <include href="../GraphBox.lzx" />
  <include href="../GraphBoxDrag.lzx" />
  <include href="../GraphConnector.lzx" />
  <include href="../GraphConnectorPanel.lzx" />
  <include href="../GraphPanel.lzx" />
  <include href="../Tools.lzx" />
  <include href="../roles.lzx" />
  
  <alert name="conalert">
    Connection between these types is not allowed!
  </alert>
  
  <alert name="deletealert">
    Cannot delete objects of this type!
  </alert>
  
  <alert name="detailalert">
    Show details here!
  </alert>




  
  <class name="ElementType1" extends="GraphBoxDrag" width="450" height="200" colorBody="0xFFAC2F">
    <method name="materialize">
      this.caption.setText("ROLE");
    </method>
    <method name="doAction" args="action">
      if ( action == "details" ) canvas.detailalert.open();
      else if ( action == "remove" ) canvas.deletealert.open();
      else super.doAction(action);
    </method>
 
   <inputtext name="myText" x="5" y="22" width="100" height="100" multiline="true">Role</inputtext>

   
  </class>


  <class name="ElementType2" extends="GraphBoxDrag" width="95" height="65" colorBody="0xA4FFA4">
    
	<view width="${parent.width}" height="${parent.height}" />

    <method name="materialize">
      this.caption.setText("Actvy");
    </method>
    <method name="doAction" args="action">
      if ( action == "details" ) canvas.detailalert.open();
      else super.doAction(action);
    </method>

   <inputtext name="myText" x="5" y="22" width="50" height="50" multiline="true">Actvy</inputtext>
  </class>


  <class name="ElementType3" extends="GraphBoxDrag" width="95" height="45" colorBody="0x99CCFF">
    <method name="materialize">
      this.caption.setText("Type 3");
    </method>
    <method name="doAction" args="action">
      if ( action == "details" ) canvas.detailalert.open();
      else super.doAction(action);
    </method>
    <text x="5" y="22">Line 1</text>
  </class>


  <view name="menubar" x="0" y="0" width="${parent.width}" height="24">
    <simplelayout axis="x"/>

  
    <button height="${parent.height}">Add: Role
      <method event="onclick">
        <![CDATA[
          var b = new window(canvas, {x:50, y:100, width:150, height:50, resizable:'true', haswindowfocus:'false' });
        ]]>
      </method>
    </button>

    <button height="${parent.height}">Add: Activity
      <method event="onclick">
        <![CDATA[
          var b = canvas.scr.panel.addBoxByClass("ElementType2", {x: 25, y: 25, visible: true});
          b.redraw();
        ]]>
      </method>
    </button>

   </view>  

      


  <view name="scr" x="0" y="${parent.menubar.height}" width="${parent.width}" 
        height="${parent.height - this.y}" clip="true" bgcolor="#a0a0a0">



<roles x="10" y="50" width="100" height="50" />
<roles x="10" y="50" width="100" height="50" />
<roles x="10" y="50" width="100" height="50" />
<roles x="10" y="50" width="100" height="50" />
<roles x="10" y="50" width="100" height="50" />
<roles x="10" y="50" width="100" height="50" />
<roles x="10" y="50" width="100" height="50" />
<roles x="10" y="50" width="100" height="50" />
<roles x="10" y="50" width="100" height="50" />



    <GraphPanel name="panel" oninit="this.restart()">
      <method name="getConnectionClass" args="box1,box2">
        <![CDATA[
        // Returns the class of the connector, which should be used for connecting box1 and box2
        // null, if the connection is not allowed
        if ( (box1['classname'] == 'ElementType1' && box2['classname'] == 'ElementType3') ||
          (box2['classname'] == 'ElementType1' && box1['classname'] == 'ElementType3') ) {
            canvas.conalert.open();
            return null;
        }
        return "GraphConnector";
        ]]>
      </method>
    </GraphPanel>

<view x="100" y="100" bgcolor="red"/>
    
    <scrollbar axis="x"/>
    <scrollbar axis="y"/>
  </view>
  


</canvas>
