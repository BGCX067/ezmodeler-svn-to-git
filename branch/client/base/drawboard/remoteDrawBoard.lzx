<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="remoteDrawBoard" extends="drawBoardConnector">
    
    <attribute name="diagramType" value="0" type="number" />    
    
    <attribute name="loadingDiagramListId" value="0" type="number" />   
    <attribute name="loadDiagramDelegate" value="null" />
    
    <!-- First Load Objects, then Load Connectors -->
    <attribute name="loadingObjects" value="true" type="boolean" />
    
    <attribute name="isRemoteLoaderAction" value="false" type="boolean" />
    
    <attribute name="remoteactionobjectList" value="null" />
    
    <attribute name="closeAfterUpdate" value="false" type="boolean" />
    <attribute name="bulkcloseAfterUpdate" value="false" type="boolean" />
    
    <!-- Eleminate one of those Variables -->
    <attribute name="currentDiagram" value="null" />
    <attribute name="currentDiagramObject" value="null" />
    <attribute name="currentInstanceList" value="null" />
    
    <attribute name="lastCheckedObject" value="null" />
    <attribute name="lastCheckedObjectPreviousText" value="" type="string" />
    <attribute name="lastCheckedObjectBaseObject" value="null" />
    
    <attribute name="exportType" value="svg" />
    
    <attribute name="read" value="true" type="boolean" />
    <attribute name="write" value="true" type="boolean" />
    <attribute name="onlyIssues" value="true" type="boolean" />
    
    <!-- needs to be stored seperated as Moderators always are allowed to read and write -->
    <attribute name="storedRead" value="true" type="boolean" />
    <attribute name="storedWrite" value="true" type="boolean" />
    <attribute name="storedOnlyIssues" value="true" type="boolean" />
    
    <!-- reference to the parent DiagramObjectId -->
    <attribute name="parentDiagramObjectId" value="0" type="number" />
    <attribute name="parentDiagramObject" value="null" />
    
    <!-- Temp Store to check Object Names -->
    <attribute name="tempCheckDelegate" value="null" />
    <attribute name="tempCheckTxt" value="" type="string" />
    <attribute name="tempCheckParentObj" value="" type="string" />
    <attribute name="tempCheckPreviousText" value="" type="string" />
    <attribute name="tempCheckParentObjTypeOfObject" value="" type="string" />
    
    <handler name="oninit">
        <![CDATA[
            //Debug.write("********** this oninit: ",this);
            
            if (canvas.currentDiagram != null) {
                if ($debug) Debug.write("Load Object");
                
                this.currentDiagram = canvas.currentDiagram;
                
                this.storedRead = this.currentDiagram.canRead;
                this.storedWrite = this.currentDiagram.canWrite;
                this.storedOnlyIssues = this.currentDiagram.onlyIssues;
                
                //For Moderators its always read & write
                if (hib.userobject.userlevel.level_id == 1){
                    this.read = this.currentDiagram.canRead;
                    this.write = this.currentDiagram.canWrite;
                    this.onlyIssues = this.currentDiagram.onlyIssues;
                }
                
                if ($debug) Debug.write("Load Object this.canWrite: ",this);
                
                this.currentDiagramObject = canvas.currentDiagram;
                this.currentInstanceList = canvas.currentInstanceList;
                
                this.loadingDiagramListId = 0;
                this.loadingObjects = true;
                this.startInitialLoadinProcess();
                
                this.updateDiagram.revisionId = canvas.currentDiagram.diagramrevision.diagramrevisionId;
                
                if ($debug) Debug.write("this.updateDiagram.revisionId: ",this.updateDiagram.revisionId);
                
                if (this.currentDiagram.parentDiagramObject != null) {
                    this.parentDiagramObjectId = this.currentDiagram.parentDiagramObject.diagramObjectId;
                    this.parentDiagramObject = this.currentDiagram.parentDiagramObject;
                }
                
            } else if (canvas.currentDiagram == null) {
                
                if (this.diagramType == 4) {
                    if ($debug) Debug.write("canvas.thishib.currentRole: ",
                            canvas.thishib.currentRole.roleObject);
                    var _startx = this.width/2-400;
                    var _starty = this.height/2-300;
                    
                    var posObject = this.calcObjectPos(_startx,_startx,_starty,_starty,"unit",true,4,40);
                    var x = posObject.x;
                    var y = posObject.y;
                    var width = posObject.width-20;
                    var height = (posObject.height*3)-20;
                    
                    this.loadUnit(canvas.thishib.currentRole.roleObject.name,
                        canvas.thishib.currentRole.roleObject.diagramObjectId,
                        x,y,width,height,
                        'unit'+this.getCounter(),false,null,null, new Array(),
                        true,null); //do Auto Place this Object
                } else if (canvas.thishib.isTempNewlyCreated) {
                    canvas.thishib.isTempNewlyCreated = false;
                        
                    var baseObject = canvas.thishib.tempNewlyCreatedBaseObject;
                    if (baseObject[0] == "process" || baseObject[0] == "processtree" 
                        || baseObject[0] == "processgroup"
                        || baseObject[0] == "departement" || baseObject[0] == "departementFixed"
                            || baseObject[0] == "company" || baseObject[0] == "companyFixed") {
                        
                        this.parentDiagramObjectId = canvas.thishib.tempParentDiagramObjectId;
                        //this.parentDiagramObject = this.currentDiagram.parentDiagramObject;
                        
                    }
                    
                    
                }
                
            } 
            
        ]]>
    </handler>
    
    <method name="startInitialLoadinProcess">
        this.loadDiagramDelegate = new LzDelegate( this, "loadDiagramObject" );
        if (this.currentInstanceList.length != 0){
            if ($debug) Debug.write("Loading Started");
            this.isRemoteLoaderAction = true;
            LzTimer.addTimer( this.loadDiagramDelegate, 100 );
        }
    </method>   
    
    <method name="loadDiagramObject">
        <![CDATA[
            if (this.loadingObjects) {
                if (this.currentInstanceList[this.loadingDiagramListId].graphAsObject[0]!='connector') {
                    this.sendWatchObject("draw",this.currentInstanceList[this.loadingDiagramListId].graphAsObject,false);
                }
            } else {
                if (this.currentInstanceList[this.loadingDiagramListId].graphAsObject[0]=='connector') {
                    this.sendWatchObject("draw",this.currentInstanceList[this.loadingDiagramListId].graphAsObject,false);
                }
            }
            this.loadingDiagramListId++;
            if (this.loadingDiagramListId < this.currentInstanceList.length){
                LzTimer.addTimer( this.loadDiagramDelegate, 100 );
            } else {
                if ($debug) Debug.write("Loading Completed");
                
                if (this.loadingObjects) {
                    this.loadingDiagramListId = 0;
                    this.loadingObjects = false;
                    this.simulateAllConnectors();
                    this.startInitialLoadinProcess();
                } else {
                    this.removeSimulatedConnectors();
                    this.setModus("hand_single");
                    LzFocus.clearFocus();
                    this.isRemoteLoaderAction = false;
                }
            }
        ]]>
    </method> 
    
    <method name="doSaveByMethod">
        if (this.currentDiagram == null){
            //reset the attribute in case the previous save did fail
	        this.closeAfterUpdate = false;
	        new saveDiagramWindow(canvas.main_content._content.inner,{
	                refObj:this,
	                parentDiagramObjectId:this.parentDiagramObjectId,
	                parentDiagramObject:this.parentDiagramObject,
	                diagramName:canvas.currentDiagramRef.currentDiagramTempName
	            });
        } else {
            //reset the attribute in case the previous save did fail
            this.closeAfterUpdate = false;
            if ($debug) Debug.write("Load Object this.storedWrite 4: ",this.storedWrite);
            new updateDiagramWindow(canvas.main_content._content.inner,{
                    parentDiagramObjectId:this.parentDiagramObjectId,
                    parentDiagramObject:this.parentDiagramObject,
                    refObj:this,read:this.storedRead,write:this.storedWrite,issueOnly:this.storedOnlyIssues,
                    diagramName:this.currentDiagram.name
                });
        }
    </method>   
    
    <handler name="ondrawmodus" args="modi">
        if (modi == 'saveobj') {
            this.doSaveByMethod();
        } else if (modi == 'drill_up') {
            if (this.currentDiagram.parentDiagramObject != null) {
                this.parentDiagramObjectId = this.currentDiagram.parentDiagramObject.diagramObjectId;
                this.parentDiagramObject = this.currentDiagram.parentDiagramObject;
                
                new lz.drillUpChooseDiagram(parent.parent.parent,{
                        diagramObjectId:this.parentDiagramObjectId
                    });
                
            } else {
                new errorPopup(canvas,{error:canvas.getLabelName(870),closable:true});
            }
        }
    </handler>
    
    <method name="doQuickSave">
        if (this.currentDiagram == null){
            this.confirmSaveAsObjectToDatabase(parent.parent.parent.currentDiagramTempName,"Quick-Save",true,true,true);
        } else {
            this.confirmUpdateAsObjectToDatabase(this.currentDiagram.name,"Quick-Save",true,true,true);
        }
    </method>
    
    <method name="showExitDialog">
        if (this.currentDiagram == null){
            new saveCloseDiagramWindow(canvas.main_content._content.inner,{
                    refObj:this,parentDiagramObjectId:this.parentDiagramObjectId,
                    parentDiagramObject:this.parentDiagramObject,
                    diagramName:canvas.currentDiagramRef.currentDiagramTempName
                });
        } else {
            if ($debug) Debug.write("Load Object this.storedWrite 5: ",this.storedWrite);
            new updateCloseDiagramWindow(canvas.main_content._content.inner,{
                    parentDiagramObjectId:this.parentDiagramObjectId,
                    parentDiagramObject:this.parentDiagramObject,
                    refObj:this,read:this.storedRead,write:this.storedWrite,issueOnly:this.storedOnlyIssues,
                    diagramName:this.currentDiagram.name
                });
        }
    </method>
    
    <method name="checkForObjectType" args="objectType">
        <![CDATA[
            for (var i=0;i<this.baseactionobjectList.length;i++) {
                //serach for the Object Type
                if (this.baseactionobjectList[i][0] == objectType) {
                    //Found, do not proceed with loop
                    return true;
                }
            }
            return false;
        ]]>
    </method>
    
    <method name="confirmSaveAsObjectToDatabase" args="diagramName,revisionComment,read,issueOnly,write">
        <![CDATA[
            this.read = read;
            this.onlyIssues = issueOnly;
            this.write = write;
        
            if ($debug) Debug.write("confirmSaveAsObjectToDatabase: ",diagramName,revisionComment);
            this.saveNewDiagram.diagramName = diagramName;
            this.saveNewDiagram.revisionComment = revisionComment;
            if ($debug) Debug.write("diagramType: ",this.diagramType);
            if ($debug) Debug.write("currentDiagram: ",this.currentDiagram);
            
            if ($debug) Debug.write("baseactionobjectList: ",this.baseactionobjectList);
            if ($debug) Debug.write("baseactionobjectList Length: ",this.baseactionobjectList.length);
            
            this.remoteactionobjectList = new Array();
            for (var i=0;i<this.baseactionobjectList.length;i++) {
                this.remoteactionobjectList[i] = this.baseactionobjectList[i];
                //simulate the Role as a Fixed, as we got only one Role Type
                if (this.baseactionobjectList[i][0] == 'unit') {
                    this.remoteactionobjectList[i][0] = 'unitFixed';
                }
                if (this.baseactionobjectList[i][0] == 'departement') {
                    this.remoteactionobjectList[i][0] = 'departementFixed';
                }
                if (this.baseactionobjectList[i][0] == 'company') {
                    this.remoteactionobjectList[i][0] = 'companyFixed';
                }
                //simulate the Process as a tree, as we got only one Process Type
                if (this.baseactionobjectList[i][0] == 'process') {
                    this.remoteactionobjectList[i][0] = 'processtree';
                }
            }
            
            this.saveNewDiagram.doCall();
        ]]>
    </method>
    
    <method name="confirmUpdateAsObjectToDatabase" args="diagramName,revisionComment,read,issueOnly,write">
        <![CDATA[
        
            this.read = read;
            this.onlyIssues = issueOnly;
            this.write = write;
            
            if ($debug) Debug.write("confirmUpdateAsObjectToDatabase: ",diagramName,revisionComment);
            this.updateDiagram.diagramName = diagramName;
            this.updateDiagram.revisionComment = revisionComment;
            if ($debug) Debug.write("diagramType: ",this.diagramType);
            if ($debug) Debug.write("currentDiagram: ",this.currentDiagram);
            
            if ($debug) Debug.write("baseactionobjectList: ",this.baseactionobjectList);
            if ($debug) Debug.write("baseactionobjectList Length: ",this.baseactionobjectList.length);
            
            this.remoteactionobjectList = new Array();
            for (var i=0;i<this.baseactionobjectList.length;i++) {
                this.remoteactionobjectList[i] = this.baseactionobjectList[i];
                //simulate the Role as a Fixed, as we got only one Role Type
                if (this.baseactionobjectList[i][0] == 'unit') {
                    this.remoteactionobjectList[i][0] = 'unitFixed';
                }
                if (this.baseactionobjectList[i][0] == 'departement') {
                    this.remoteactionobjectList[i][0] = 'departementFixed';
                }
                if (this.baseactionobjectList[i][0] == 'company') {
                    this.remoteactionobjectList[i][0] = 'companyFixed';
                }
                //simulate the Process as a tree, as we got only one Process Type
                if (this.baseactionobjectList[i][0] == 'process') {
                    this.remoteactionobjectList[i][0] = 'processtree';
                }
            }
            
            if ($debug) Debug.write("diagramNo: ",this.currentDiagram.diagramNo);
            this.updateDiagram.doCall();
        ]]>
    </method>
    
    <netRemoteCallHib name="saveNewDiagram" funcname="diagramservice.saveNewDiagram" 
                      remotecontext="$once{ canvas.thishib }" >
        <attribute name="diagramName" type="string" value="" />
        <attribute name="revisionComment" type="string" value="" />
        <handler name="sendCallBack" >
            if (parent.closeAfterUpdate){
                parent.showExitDialog();
            } else {
                parent.ondrawmodus.sendEvent("saveobj");
            }
        </handler>
        <netparam><method name="getValue">return canvas.sessionId;</method></netparam>
        <netparam><method name="getValue">return parent.diagramName;</method></netparam>
        <netparam><method name="getValue">return parent.revisionComment;</method></netparam>
        <netparam><method name="getValue">return parent.parent.remoteactionobjectList;</method></netparam>
        <netparam><method name="getValue">return hib.currentdomainObj.organisation_id;</method></netparam>
        <netparam><method name="getValue">return parent.parent.diagramType;</method></netparam>
        <netparam><method name="getValue">return parent.parent.read;</method></netparam>
        <netparam><method name="getValue">return parent.parent.write;</method></netparam>
        <netparam><method name="getValue">return parent.parent.onlyIssues;</method></netparam>
        <netparam><method name="getValue">return null;</method></netparam>
        <netparam><method name="getValue">return hib.userlang;</method></netparam>
        <netparam><method name="getValue">return parent.parent.parentDiagramObjectId;</method></netparam>
        <netparam><method name="getValue">return hib.currentProjectId;</method></netparam>
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            if ($debug) Debug.write("saveNewDiagram: ",value);
            if (value > 0){
                if (parent.closeAfterUpdate){
                    parent.parent.parent.parent.doCloseAfterSaveEvent();
                } else if (parent.bulkcloseAfterUpdate) {
                    parent.parent.parent.parent.doBulkCloseAfterSaveEvent();
                } else {
                    parent.getDiagramById.diagramId = value;
                    parent.getDiagramObjectsById.diagramId = value;
                    parent.getDiagramById.doCall();
                }
            } else if (value == -39){
                if($debug) Debug.write("Duplicate Diagram Name");
                new callbackRpcErrorDialog(canvas,{callBackObject:this,errorid:Number(value)});
            }
        </handler>  
    </netRemoteCallHib>    
    
    
    <netRemoteCallHib name="updateDiagram" funcname="diagramservice.updateDiagram" 
                      remotecontext="$once{ canvas.thishib }" >
        <attribute name="diagramName" type="string" value="" />
        <attribute name="revisionComment" type="string" value="" />
        <attribute name="revisionId" type="number" value="0" />
        <attribute name="forceUpdate" type="boolean" value="false" />
        <handler name="sendCallBack" >
            if (parent.closeAfterUpdate){
                parent.showExitDialog();
            } else {
                parent.ondrawmodus.sendEvent("saveobj");
            }
        </handler>
        <netparam><method name="getValue">return canvas.sessionId;</method></netparam>
        <netparam><method name="getValue">return parent.diagramName;</method></netparam>
        <netparam><method name="getValue">return parent.revisionComment;</method></netparam>
        <netparam><method name="getValue">return parent.parent.remoteactionobjectList;</method></netparam>
        <netparam><method name="getValue">return hib.currentdomainObj.organisation_id;</method></netparam>
        <netparam><method name="getValue">return parent.parent.diagramType;</method></netparam>
        <netparam><method name="getValue">return parent.parent.currentDiagram.diagramNo;</method></netparam>
        <netparam><method name="getValue">return parent.parent.read;</method></netparam>
        <netparam><method name="getValue">return parent.parent.write;</method></netparam>
        <netparam><method name="getValue">return parent.parent.onlyIssues;</method></netparam>
        <netparam><method name="getValue">return null;</method></netparam>
        <netparam><method name="getValue">return hib.userlang;</method></netparam>
        <netparam><method name="getValue">return parent.revisionId;</method></netparam>
        <netparam><method name="getValue">return parent.forceUpdate;</method></netparam>
        <netparam><method name="getValue">return parent.parent.parentDiagramObjectId;</method></netparam>
        <netparam><method name="getValue">return hib.currentProjectId;</method></netparam>
        <handler name="ondata" args="value">
            //The onResult-Handler will be called be the rtmpconnection
            if ($debug) Debug.write("updateDiagram: ",value);
            if (value > 0){
                this.forceUpdate = false;
                if (parent.closeAfterUpdate){
                    parent.parent.parent.parent.doCloseAfterSaveEvent();
                } else if (parent.bulkcloseAfterUpdate) {
                    parent.parent.parent.parent.doBulkCloseAfterSaveEvent();
                } else {
                    parent.getDiagramById.diagramId = value;
                    parent.getDiagramObjectsById.diagramId = value;
                    parent.getDiagramById.doCall(); 
                }
            } else if (value == -36){
                if($debug) Debug.write("Over write Action");
                new callbackRpcErrorDialogOverwrite(canvas,{callBackObject:this,errorid:value});
            } else if (value == -39){
                if($debug) Debug.write("Duplicate Diagram Name");
                new callbackRpcErrorDialog(canvas,{callBackObject:this,errorid:Number(value)});
            }
        </handler>  
        <handler name="sendOverwrite">
            this.forceUpdate = true;
            this.doCall();
        </handler>
    </netRemoteCallHib> 
    
    <netRemoteCallHib name="getDiagramById" funcname="diagramservice.getDiagramById" 
                      remotecontext="$once{ canvas.thishib }" >      
        <attribute name="diagramId" value="" type="string" />
        <netparam><method name="getValue">return canvas.sessionId; </method></netparam>
        <netparam><method name="getValue">return parent.diagramId;</method></netparam> 
        <handler name="ondata" args="value">
            <![CDATA[
                if ($debug) Debug.write("getDiagramById: ",value);
                parent.currentDiagram = value;
                
                parent.parent.parent.parent.setCurrentSelectedObject(null);
                parent.updateDiagram.revisionId = parent.currentDiagram.diagramrevision.diagramrevisionId;
                parent.parent.parent.parent.currentDiagramTempName = value.name;
                
                parent.parent.parent.parent.currentDiagramMini.setAttribute('btnName',
                    parent.parent.parent.parent.currentDiagramTempName);
                    
                parent.currentDiagramObject = value;
                parent.parent.parent.parent._diagramSideBar.updateSidebarByDiagramNo(value.diagramNo);
                parent.getDiagramObjectsById.doCall();

                //Reload the Items after save or update of Diagram
                parent.parent.parent.parent._diagramSideBar._innerSideBar._version.refresh(value);
                if (parent.diagramType == 3 || parent.diagramType == 1){
                    parent.parent.parent.parent._diagramSideBar._innerSideBar._libraryObjects.setDiagramObjects(parent.currentDiagram);
                    parent.parent.parent.parent._diagramSideBar._innerSideBar._libraryObjects.refresh();
                    parent.parent.parent.parent._toolBar.destroy();
                    parent.parent.parent.parent.initWriteDialogsByDiagram(parent.currentDiagram);
                } else {
                    parent.parent.parent.parent._diagramSideBar._innerSideBar._hierarchicalExplorerSidebar.refresh();
                    parent.parent.parent.parent._diagramSideBar._innerSideBar._processAndActivitiesTableSidebar.refresh();
                    parent.parent.parent.parent._diagramSideBar._innerSideBar._flowsExplorerSidebar.refresh();
                }
            ]]>
        </handler>
    </netRemoteCallHib> 
    
   <netRemoteCallHib name="getDiagramObjectsById" funcname="diagramservice.getDiagramObjectsById" 
                      remotecontext="$once{ canvas.thishib }" >      
        <attribute name="diagramId" value="" type="string" />
        <netparam><method name="getValue">return canvas.sessionId; </method></netparam>
        <netparam><method name="getValue">return parent.diagramId;</method></netparam> 
        <netparam><method name="getValue">return hib.currentdomainObj.organisation_id;</method></netparam>
        <handler name="ondata" args="value">
            if ($debug) Debug.write("getDiagramObjectsById: ",value);
            parent.currentInstanceList = value;
            parent.updateDiagramIdentifier(value);
        </handler>
    </netRemoteCallHib>    
    
    <method name="updateDiagramIdentifier" args="value">
        <![CDATA[
            //if ($debug) Debug.write("updateDiagramIdentifier: ",value);
            for (var i=0;i<value.length;i++) {
                //if ($debug) Debug.write("this.value i : ",value[i].graphAsObject);
                var newName = value[i].graphAsObject[value[i].graphAsObject.length-1];
                //if ($debug) Debug.write("newName: ",newName);
                this.updateBaseObjectListItemByName(newName,
                    value[i].graphAsObject[value[i].graphAsObject.length-7],
                    value[i].graphAsObject[value[i].graphAsObject.length-9],
                    value[i].graphAsObject[0]);
            }    
            
            //reset Save Dialog if somebody wants to delete all objects
            parent.parent.parent.setAttribute('destroyByMethod',false);
        ]]>        
    </method>  
    
    <method name="abortSaveProcess">
        if (this.closeAfterUpdate){
            parent.parent.parent.doCloseAfterSaveEvent();
        } else if (this.bulkcloseAfterUpdate) {
            parent.parent.parent.doBulkCloseAfterSaveEvent();
        }
    </method>
    
    <method name="updateBaseObjectListItemByName" args="newName,diagramobjectid,connectObj,type">
        <![CDATA[
            //if ($debug) Debug.write("updateBaseObjectListItemByName: ",newName,diagramobjectid);
            for (var i=0;i<this.baseactionobjectList.length;i++) {
                if (this.baseactionobjectList[i][this.baseactionobjectList[i].length-1] == newName){
                    //if ($debug) Debug.write("Found OLD,NEW",this.baseactionobjectList[i][this.baseactionobjectList[i].length-7],diagramobjectid);
                    this.baseactionobjectList[i][this.baseactionobjectList[i].length-7] = diagramobjectid;
                    if (type == "processtree" || type == "activity" 
                            || type == "outputflow" || type == "inputflow") {
                        //if ($debug) Debug.write("Previous Value",this.baseactionobjectList[i][this.baseactionobjectList[i].length-9]);
                        //if ($debug) Debug.write("New Value",connectObj);
                        this.baseactionobjectList[i][this.baseactionobjectList[i].length-9] = connectObj;
                    }
                    //if ($debug) Debug.write("Updated Item: ",this.baseactionobjectList[i]);
                } 
            }        
        ]]>        
    </method>  
    
    <!-- check object for unique name -->
    <method name="checkObjectForUniqueName" args="objectName,baseObject,previousText,typeOfObject">
        if ($debug) Debug.write("checkObjectForUniqueName: ",objectName,baseObject,previousText,typeOfObject);
        this.tempCheckDelegate = new LzDelegate( this, "checkObjectForUniqueNameTimerBased" );
        this.tempCheckTxt = objectName;
        this.tempCheckParentObj = baseObject;
        this.tempCheckPreviousText = previousText;
        this.tempCheckParentObjTypeOfObject = typeOfObject;
        LzTimer.addTimer( this.tempCheckDelegate, 500 );
    </method>
    
    
    <method name="checkObjectForUniqueNameTimerBased" >
        <![CDATA[
        
            var objectName = this.tempCheckTxt;
            var baseObject = this.tempCheckParentObj;
            var previousText = this.tempCheckPreviousText;
            var typeOfObject = this.tempCheckParentObjTypeOfObject;
        
            var diagramObjectId = null;
            this.lastCheckedObject = baseObject;
            this.lastCheckedObjectPreviousText = previousText;
            //if ($debug) Debug.write("previousText: ",previousText);
            //if ($debug) Debug.write("checkObjectForUniqueName,previousText: ",objectName,baseObject,previousText);
            for (var i=0;i<this.baseactionobjectList.length;i++) {
                if (this.baseactionobjectList[i][this.baseactionobjectList[i].length-1] == baseObject.name){
                    //if ($debug) Debug.write("Found ITEM: ",this.baseactionobjectList[i][this.baseactionobjectList[i].length-7]);
                    //if ($debug) Debug.write("Found ITEM Former Text: ",this.baseactionobjectList[i]);
                    diagramObjectId = this.baseactionobjectList[i][this.baseactionobjectList[i].length-7];
                }
            }   
            //Set diagramObjectId to -1, to find local duplicates, cause new object all have a 
            //diagramObjectId of value 0, but that does not mean that these object are the same
            if (diagramObjectId == 0) {
                diagramObjectId = -1;
            }
            //if ($debug) Debug.write("objectName,baseObject,diagramObjectId: ",objectName,baseObject,diagramObjectId);
            //First check the Current Diagram
            var foundHere = this.checkForLocalDuplicates(objectName,baseObject,diagramObjectId,typeOfObject);
            
            //store temp for Remote-Dialog
            this.lastCheckedObjectBaseObject = baseObject;
            
            if (foundHere) {
                //Need cause otherwise the Selection Box is drawn Endless
                //this.endDrawSelectionBox();
                //mousetracker_del.unregisterAll();
                new uniqueObjectNameErrorDialog(canvas.main_content._content.inner,{
                        refObj:this,
                        errorid:Number(-37),
                        objectName:objectName,
                        baseObject:this.lastCheckedObjectBaseObject,
                        diagramObjectId:diagramObjectId,
                        typeOfObject:typeOfObject,
                        previousText:this.lastCheckedObjectPreviousText
                    });
            }else {
                //check remote Diagrams
                //if ($debug) Debug.write("checkObjectForUniqueName: ",objectName,diagramObjectId);
                this.checkForUniqueName.objectName = objectName;
                this.checkForUniqueName.diagramObjectId = diagramObjectId;
                this.checkForUniqueName.typeOfObject = typeOfObject;
                this.checkForUniqueName.doCall();
            }
        ]]>
    </method>
    
    <method name="checkForLocalDuplicates" args="objectName,baseObject,diagramObjectId,typeOfObject">
        <![CDATA[
            if ($debug) Debug.write("checkForLocalDuplicates: ",objectName,baseObject,diagramObjectId,typeOfObject);
        
            //First check the Current Diagram
            var foundHere = false;
            for (var i=0;i<this.baseactionobjectList.length;i++) {
                
                if ($debug) Debug.write("Type here: ",this.baseactionobjectList[i][0]);
                
                if (this.baseactionobjectList[i][0] == typeOfObject 
                            || this.baseactionobjectList[i][0] == typeOfObject+"Fixed") {
                
	                if (this.baseactionobjectList[i][this.baseactionobjectList[i].length-8] == objectName){
	                    
	                    //this.baseactionobjectList[i]
	                    //baseObject
	                    
	                    //First test for same diagramObjectId
	                    if (this.baseactionobjectList[i][this.baseactionobjectList[i].length-7] == diagramObjectId) {
	                        //if ($debug) Debug.write("Found Self");
	                    } else {
	                        //then test for same Object Name
	                        if (this.baseactionobjectList[i][this.baseactionobjectList[i].length-1] == baseObject.name) {
	                            //if ($debug) Debug.write("Found Same");
	                        } else {
	                            //if ($debug) Debug.write("Found Duplicate");
	                            foundHere = true;
	                        }
	                        //break;
	                    }                    
	                }
                
                }
                
            }   
            
            return foundHere;
            
        ]]>
    </method>
    
   <netRemoteCallHib name="checkForUniqueName" funcname="diagramservice.checkForUniqueName" 
                      remotecontext="$once{ canvas.thishib }" >      
        <attribute name="objectName" value="" type="string" />
        <attribute name="diagramObjectId" value="0" type="number" />
        <attribute name="typeOfObject" value="" type="string" />
        <netparam><method name="getValue">return canvas.sessionId; </method></netparam>
        <netparam><method name="getValue">return parent.objectName;</method></netparam> 
        <netparam><method name="getValue">return parent.diagramObjectId;</method></netparam> 
        <netparam><method name="getValue">return parent.typeOfObject;</method></netparam> 
        <netparam><method name="getValue">return hib.currentdomainObj.organisation_id;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
                //if ($debug) Debug.write("checkForUniqueName: ",value);
                if (value < 0) {
                    new uniqueObjectNameErrorDialog(canvas.main_content._content.inner,{
                            refObj:parent,
                            errorid:Number(value),
                            objectName:this.objectName,
                            baseObject:parent.lastCheckedObjectBaseObject,
                            diagramObjectId:this.diagramObjectId,
                            typeOfObject:parent.tempCheckParentObjTypeOfObject,
                            previousText:parent.lastCheckedObjectPreviousText
                        });
                }
            ]]>
        </handler>
    </netRemoteCallHib>   
    
    <method name="sendNewName" args="objectName">
        //if ($debug) Debug.write("sendNewName: ",this.lastCheckedObject.typeOfObject,objectName);
        if (this.lastCheckedObject.typeOfObject == "inputflow") {
            this.completedInputflowObjByRemote(this.lastCheckedObject,objectName);
        } else if (this.lastCheckedObject.typeOfObject == "outputflow") {
            this.completedOutputflowObjByRemote(this.lastCheckedObject,objectName);
        } else {
            this.completedObjectTextObjByRemote(this.lastCheckedObject,objectName);
        }
    </method>
    
    <method name="exportSVG">
        this.exportType = "svg";
        this.generateExportJob.doCall();
    </method>
    
    <method name="exportPNG">
        this.exportType = "png";
        this.generateExportJob.doCall();
    </method>
    
    <method name="exportJPG">
        this.exportType = "jpg";
        this.generateExportJob.doCall();
    </method>
    
    <method name="exportPDF">
        this.exportType = "pdf";
        this.generateExportJob.doCall();
    </method>
    
    <method name="exportXML">
        this.exportType = "xml";
        this.generateExportJob.doCall();
    </method>
    
    <method name="exportCustom">
        new exportToCustomType(canvas,{refObj:this});
    </method>
    
    <method name="doExportByType" args="type">
        this.exportType = type;
        this.generateExportJob.doCall();
    </method>
    
    <netRemoteCallHib name="generateExportJob" funcname="generateExportJob" 
                      remotecontext="$once{ canvas.thishib }" >    
        <attribute name="diagramType" value="0" type="number" />
        <netparam><method name="getValue">return canvas.sessionId; </method></netparam>
        <netparam><method name="getValue">return parent.parent.baseactionobjectList;</method></netparam>
        <netparam><method name="getValue">return canvas.currentDiagramRef.currentDiagramTempName;</method></netparam>
        <netparam><method name="getValue">return 0;</method></netparam>
        <netparam><method name="getValue">return parent.parent.diagramType;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
                if ($debug) Debug.write("generateExportJob: ",value);
                var downloadurl = 'http://'+canvas.rtmphostlocal+':'+canvas.red5httpport
                        +'/'+canvas.webAppRootKey+'/ExportDiagram?sid='+canvas.sessionId
                        +'&exportId='+value+'&exportType='+parent.exportType;
                if ($debug) Debug.write(downloadurl);
                LzBrowser.loadURL(downloadurl,'_parent');
            ]]>
        </handler>
    </netRemoteCallHib>       
    
</class>

</library>
