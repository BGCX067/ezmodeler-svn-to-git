<?xml version="1.0" encoding="UTF-8" ?>

<!-- methods for main.lzx -->

<library>
 
	<method name="openMeetingsMenuItemHandler">
	    LzBrowser.loadURL("http://www.i4change.com","_BLANK");
	</method>
    
    <attribute name="keyDelegate" value="null" />
    
    <method name="doSaveDiagram">
        if ($debug) Debug.write("doSaveDiagram: ",this);
        if (canvas.currentDiagramRef) {
            canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.doQuickSave();
        }
    </method>
    
    <method name="doSaveAsDiagram">
        if ($debug) Debug.write("doSaveAsDiagram: ",this);
        if (canvas.currentDiagramRef) {
            canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.currentDiagram = null;
            canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.ondrawmodus.sendEvent("saveobj");
        }
    </method>
    
    <method name="doAddDiagram">
        new chooseDiagramType(canvas);
    </method>
    
    <method name="doOpenDiagram">
        new diagramLoaderWin(canvas.main_content._content.inner);
    </method>
    
    <method name="doPrintDiagram">
        if (canvas.currentDiagramRef) {
            canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.exportCustom();
        }
    </method>
	 
	<method name="myinit">
        
        canvas.doDebug(canvas,"my",123,{u:1});
		<![CDATA[
        
		    this.keyDelegate = new LzDelegate(this, "doSaveDiagram");
            LzKeys.callOnKeyCombo(this.keyDelegate, ["CONTROL","S"]);
            
            this.keyDelegate = new LzDelegate(this, "doSaveAsDiagram");
            LzKeys.callOnKeyCombo(this.keyDelegate, ["CONTROL","SHIFT","S"]);
            
            this.keyDelegate = new LzDelegate(this, "doAddDiagram");
            LzKeys.callOnKeyCombo(this.keyDelegate, ["CONTROL","N"]);
            
            this.keyDelegate = new LzDelegate(this, "doOpenDiagram");
            LzKeys.callOnKeyCombo(this.keyDelegate, ["CONTROL","O"]);
            
            this.keyDelegate = new LzDelegate(this, "doPrintDiagram");
            LzKeys.callOnKeyCombo(this.keyDelegate, ["CONTROL","P"]);

			if($debug) Debug.write("main.lzx/config.xml ondata",this);
			//Set Config-values by config.xml, see comments on config.xml
			this.setAttribute('rtmphostlocal',canvas.myConfigSet.getPointer().xpathQuery('config/rtmphostlocal/text()'));   
			this.setAttribute('rtmpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpport/text()')));  
			this.setAttribute('rtmpTunnelport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/rtmpTunnelport/text()')));  
			this.setAttribute('red5httpport',Number(canvas.myConfigSet.getPointer().xpathQuery('config/red5httpport/text()')));  
			this.setAttribute('basebgcolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/basebgcolorizer/text()'));  
			this.setAttribute('baseMousecolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMousecolorizer/text()'));  
			this.setAttribute('baseMouseOvercolorizer',canvas.myConfigSet.getPointer().xpathQuery('config/baseMouseOvercolorizer/text()'));  
			this.setAttribute('currentappversion',canvas.myConfigSet.getPointer().xpathQuery('config/currentappversion/text()'));  
			this.setAttribute('currentappname',canvas.myConfigSet.getPointer().xpathQuery('config/currentappname/text()'));  
			this.setAttribute('currentappnameurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnameurl/text()'));  
			this.setAttribute('currentappnamebugurl',canvas.myConfigSet.getPointer().xpathQuery('config/currentappnamebugurl/text()'));
			this.setAttribute('loudnessAcitviation',canvas.myConfigSet.getPointer().xpathQuery('config/loudnessAcitviation/text()'));
			this.setAttribute('webAppRootKey',canvas.myConfigSet.getPointer().xpathQuery('config/webAppRootKey/text()'));
			this.setAttribute('showWindowEffect',canvas.myConfigSet.getPointer().xpathQuery('config/showWindowEffect/text()'));
			this.setAttribute('firstdayinweek',canvas.myConfigSet.getPointer().xpathQuery('config/firstdayinweek/text()'));
			
			this.setAttribute('connectorPointColor',canvas.myConfigSet.getPointer().xpathQuery('config/connectorPointColor/text()'));
		
			this.setAttribute('defaultProcessGroupWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultProcessGroupWidth/text()')));  
			this.setAttribute('defaultProcessGroupHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultProcessGroupHeight/text()')));  
			this.setAttribute('defaultProcessWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultProcessWidth/text()')));  
			this.setAttribute('defaultProcessHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultProcessHeight/text()')));  
			this.setAttribute('defaultActicityWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultActicityWidth/text()')));  
			this.setAttribute('defaultActicityHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultActicityHeight/text()')));  
			this.setAttribute('defaultCompanyWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultCompanyWidth/text()')));  
			this.setAttribute('defaultCompanyHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultCompanyHeight/text()')));  
			this.setAttribute('defaultDepartementWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultDepartementWidth/text()')));  
			this.setAttribute('defaultDepartementHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultDepartementHeight/text()')));  
			this.setAttribute('defaultUnitWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultUnitWidth/text()')));  
			this.setAttribute('defaultUnitHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultUnitHeight/text()')));  
			this.setAttribute('defaultInputFlowWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultInputFlowWidth/text()')));  
			this.setAttribute('defaultInputFlowHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultInputFlowHeight/text()')));  
			this.setAttribute('defaultOutFlowWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultOutFlowWidth/text()')));  
			this.setAttribute('defaultOutFlowHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultOutFlowHeight/text()')));  
			
			this.setAttribute('defaultOptionmenuKeyNumber',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultOptionmenuKeyNumber/text()')));  
			this.setAttribute('continousCreationKey',Number(canvas.myConfigSet.getPointer().xpathQuery('config/continousCreationKey/text()')));  
			
            
            this.setAttribute('defaultRoleWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultRoleWidth/text()')));  
            this.setAttribute('defaultRoleHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultRoleHeight/text()')));  
              
            this.setAttribute('defaultDiagramHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultDiagramHeight/text()')));  
            this.setAttribute('defaultDiagramWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/defaultDiagramWidth/text()')));  
            this.setAttribute('currentConnectorStroke',Number(canvas.myConfigSet.getPointer().xpathQuery('config/currentConnectorStroke/text()')));  
            this.setAttribute('snapWidth',Number(canvas.myConfigSet.getPointer().xpathQuery('config/snapWidth/text()')));  
            this.setAttribute('snapHeight',Number(canvas.myConfigSet.getPointer().xpathQuery('config/snapHeight/text()')));  
            this.setAttribute('snapWidthGridX',Number(canvas.myConfigSet.getPointer().xpathQuery('config/snapWidthGridX/text()')));  
            this.setAttribute('snapHeightGridY',Number(canvas.myConfigSet.getPointer().xpathQuery('config/snapHeightGridY/text()')));  
            
            this.setAttribute('autoSaveTime',Number(canvas.myConfigSet.getPointer().xpathQuery('config/autoSaveTime/text()')));
            
			mainBaseText.setText(canvas.currentappname);
			mainBaseText.setShadow();
			mainBaseTextLabel.setAttribute('text',canvas.currentappnameurl);  
		
            this.clearCurrentHelpIds();
			
			var doubleSlash = _url.indexOf("//");
			var isNotPort80 = _url.indexOf(":", doubleSlash+2);
			//Debug.write("isNotPort80: ",isNotPort80);
			if (isNotPort80!=-1){
			    //Debug.write("isNotPort80: ",doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2);
			    var server = _url.substr(doubleSlash+2, _url.indexOf(":", doubleSlash+2)-doubleSlash-2); 
			} else {
			    var server = _url.substr(doubleSlash+2, _url.indexOf("/", doubleSlash+2)-doubleSlash-2); 
			}
			
			//Debug.write("this zielnr: ",this,server);
			
			this.setAttribute('rtmphost',server);
		
			if (this.rtmphostlocal.length==0){
			    this.setAttribute('rtmphostlocal',server);
			}
		
			//check for reset password
			var hash = LzBrowser.getInitArg('hash');
			if (hash!=undefined){
				canvas.isResetUsername = true;
				canvas.resetHash = hash;		
			}
		
			//Debug.write("rtmphostlocal,rtmphost: ",canvas.rtmphostlocal,canvas.rtmphost);	
			
			var src = 'rtmp://'+canvas.rtmphostlocal+':'+canvas.rtmpport+'/'+canvas.webAppRootKey+'/hibernate';
			canvas.thishib.setAttribute('src',src);
			canvas.thishib.loaderVar = new autoLoader(canvas);
			canvas.thishib.loaderVar.src.setText("connecting");
			canvas.thishib.connect();
		]]>
	</method>
	
	<method name="getLabelName" args="id">
		//if($debug) Debug.write("main.lzx/getLabelName()",id);
		return getLabelTag(id);
	</method>
	
	<attribute name="checkLabelArray" value="null" />
	
	<handler name="oninit">
		this.checkLabelArray = new Array();
	</handler>
	
	<method name="checkLabelByIDMethod" args="id,value">
		<![CDATA[
			if ($debug) Debug.write("checkLabelByIDMethod : ",id,value);
			var bool = false;
			for (var i=0;i<this.checkLabelArray.length;i++){
				if (this.checkLabelArray[i].id == id){
					bool = true;
					if ($debug) Debug.write("Found : ",this.checkLabelArray[i]);
				}
			}
			if (!bool){
				var tArray = new Array();
				tArray["id"] = id;
				tArray["value"] = value;
				this.checkLabelArray.push(tArray);
			}
		]]>
	</method>
	
	<method name="getLabelArray">
		<![CDATA[
			var tString = "";
			for (var i=0;i<this.checkLabelArray.length;i++){
				tString += this.checkLabelArray[i]["id"]+", ";
			}
			if ($debug) Debug.write("tString: ",tString);
		]]>
	</method>
	
	<method name="setInitObject" args="obj">
		canvas.initObjectDiagram = obj;
	</method>
	
	<method name="showKaleidoscope">
    	if($debug) Debug.write("showKaleidoscope: ",this);
    	canvas.website_content.setAttribute("visibility","visible");
    	
    	new lz.kaleidoscope(canvas.website_content);
    </method>

	<!-- you can delete this comment. It was just memo.
			Mar 24 2008 onokeiji@gmail.com
		 moved from modules/conference/conference/conferenceMenubar.lzx
	-->
	<method name="doActionmenu" args="stringSub">
	    <![CDATA[
	        if($debug) Debug.write("doActionmenu: ",stringSub);
	        if (stringSub=='quit') {
                
                var tempactionName = getTempActionname();
                if($debug) Debug.write("getTempActionname(): ",getTempActionname());
                
                if (tempactionName == 'mainDiagram' || tempactionName == 'hierarchical' ||
                    tempactionName == 'singleRole' || 
                    tempactionName == 'roleView' || tempactionName == 'processgroup') {
                    if (!canvas.main_content._content.inner.subviews[0].checkForBulkUpdates()) {
                        var t = new Array();
	                    t.action = 'mainDashboard';
	                    //if($debug) Debug.write( 'conferenceMenubar: doActionMenu(): ' , t);
	                    loadContent(t);
                    }
                }
                
            } else if (stringSub=='showProcessExplorer') {
                if (canvas.currentDiagramRef._processExplorer == null) {
                    new processExplorer(canvas.currentDiagramRef,{name:'_processExplorer'});
                }   
            } else if (stringSub=='showHierarchicalExplorer') {
                if (canvas.currentDiagramRef._hierarchicalExplorer == null) {
                    new hierarchicalExplorer(canvas.currentDiagramRef,{name:'_hierarchicalExplorer'});
                }   
            } else if (stringSub=='showRoleExplorer') {
                if (canvas.currentDiagramRef._roleexplorer == null) {
                    new roleExplorer(canvas.currentDiagramRef,{name:'_roleexplorer'});
                }
                
                
            } else if (stringSub=='showRevisionHistory') {
                if (canvas.currentDiagramRef._revisionhistory == null) {
                    new revisionhistory(canvas.currentDiagramRef,{name:'_revisionhistory',
                        currentRemoteDiagram:canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.currentDiagramObject
                    });
                }
            } else if (stringSub=='showRevisionHistoryProcess') {
                if (canvas.currentDiagramRef._revisionhistory == null) {
                    new revisionhistory(canvas.currentDiagramRef,{name:'_revisionhistory',
                        currentRemoteDiagram:canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.currentDiagramObject
                    });
                }
            } else if (stringSub=='showRevisionHistoryHierarchical') {
                if (canvas.currentDiagramRef._revisionhistory == null) {
                    new revisionhistory(canvas.currentDiagramRef,{name:'_revisionhistory',
                        currentRemoteDiagram:canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.currentDiagramObject
                    });
                }    
                
            } else if (stringSub=='showPropertyInspector') {
                if ($debug) Debug.write(canvas.currentDiagramRef._propertyInspector);
                if (canvas.currentDiagramRef._propertyInspector == null) {
                    new propertyInspector(canvas.currentDiagramRef,{name:'_propertyInspector'});
                }
            } else if (stringSub=='showPropertyInspectorProcess') {
                if (canvas.currentDiagramRef._propertyInspector == null) {
                    new propertyInspector(canvas.currentDiagramRef,{name:'_propertyInspector'});
                }
            } else if (stringSub=='showPropertyInspectorProcessHierarchical') {
                if (canvas.currentDiagramRef._propertyInspector == null) {
                    new propertyInspector(canvas.currentDiagramRef,{name:'_propertyInspector'});
                }    
                
            } else if (stringSub=='open') {
                new diagramLoaderWin(canvas.main_content._content.inner);
            } else if (stringSub=='close') {
                if (canvas.currentDiagramRef != null) {
                    if ($debug) Debug.write(canvas.currentDiagramRef);
                    canvas.currentDiagramRef.ontabcontentleave.sendEvent();
                } else {
                    if ($debug) Debug.warn("No Diagram available");
                }
            } else if (stringSub=='print') {
                if($debug) Debug.write("doActionmenu: ",stringSub);
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.doPrintJob();
            } else if (stringSub=='exportSVG') {
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.exportSVG();
            } else if (stringSub=='exportPNG') {
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.exportPNG();
            } else if (stringSub=='exportJPG') {
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.exportJPG();
            } else if (stringSub=='exportPDF') {
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.exportPDF();
            } else if (stringSub=='exportCustom') {
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.exportCustom();
            } else if (stringSub=='exportXML') {
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.exportXML();
            } else if (stringSub=='importXML') {
                new importDiagram(canvas);
            } else if (stringSub=='new') {
                new chooseDiagramType(canvas);
            } else if (stringSub=='save') {
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.ondrawmodus.sendEvent("saveobj");
            } else if (stringSub=='save_as') {
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.currentDiagram = null;
                canvas.currentDiagramRef._scrollcontent.contentArea._currentBoard.ondrawmodus.sendEvent("saveobj");
            } else {
                if ($debug) Debug.warn("Unkown Action ",stringSub);
            }
            
            
	    ]]>
	</method>   
    
    <method name="initMainDialog">
        <![CDATA[
        
            canvas.thishib.loaderVar.close();
            
            new mainDiagram(canvas.main_content._content.inner,{name:'_mainDiagram'});
            canvas.diagramObjectIsOpen = true;
        
            if (hib.userobject.userlevel.level_id == 3){
	            new dashboardMenubarAdmin (canvas,{name:'_dashboardMenubar',visibility:'hidden'});
	            new roleViewMenubarAdmin (canvas,{name:'_roleViewMenubar',visibility:'hidden'});
	            new processgroupMenubarAdmin (canvas,{name:'_processgroupMenubar',visibility:'hidden'});
	            new hierarchicalMenubarAdmin (canvas,{name:'_hierarchicalMenubar',visibility:'hidden'});
	            new singleRoleMenubarAdmin (canvas,{name:'_singleRoleMenubar',visibility:'hidden'});
            } else if (hib.userobject.userlevel.level_id == 2){
	            new dashboardMenubarMod (canvas,{name:'_dashboardMenubar',visibility:'hidden'});
	            new roleViewMenubarMod (canvas,{name:'_roleViewMenubar',visibility:'hidden'});
	            new processgroupMenubarMod (canvas,{name:'_processgroupMenubar',visibility:'hidden'});
	            new hierarchicalMenubarMod (canvas,{name:'_hierarchicalMenubar',visibility:'hidden'});
	            new singleRoleMenubarMod (canvas,{name:'_singleRoleMenubar',visibility:'hidden'});
            } else {
                if (hib.currentdomainUserObj.isModerator){
                    new dashboardMenubarMod (canvas,{name:'_dashboardMenubar',visibility:'hidden'});
                } else {
	               new dashboardMenubarUser (canvas,{name:'_dashboardMenubar',visibility:'hidden'});
                }
	            new roleViewMenubarUser (canvas,{name:'_roleViewMenubar',visibility:'hidden'});
	            new processgroupMenubarUser (canvas,{name:'_processgroupMenubar',visibility:'hidden'});
	            new hierarchicalMenubarUser (canvas,{name:'_hierarchicalMenubar',visibility:'hidden'});
	            new singleRoleMenubarUser (canvas,{name:'_singleRoleMenubar',visibility:'hidden'});
            }
            
            //Initialize Main-Dashboard
            quicklinkAct('kDashboard');
        
            _currentUserHeaderMenu.setAttribute('visibility','visible');
            if (hib.currentRole != null) {
                _currentUserHeaderMenu.setAttribute('text',
                            hib.userobject.login + '@' + hib.currentdomainObj.name 
                            + " (" + canvas.getLabelName(709) + hib.currentRole.roleObject.name + ")");            
            } else {
                _currentUserHeaderMenu.setAttribute('text',
                            hib.userobject.login + '@' + hib.currentdomainObj.name );            
            }
            _currentUserHeaderMenu.bringToFront();
            
            if (hib.userobject.userPropsAsObject != null) {
                if ($debug) Debug.write("hib.userobject.userPropsAsObject.showFirstStartWizzard: ",hib.userobject.userPropsAsObject.showFirstStartWizzard);
                if ($debug) Debug.write("hib.userobject.userPropsAsObject.showFirstStartWizzard: ",typeof(hib.userobject.userPropsAsObject.showFirstStartWizzard));
                if (hib.userobject.userPropsAsObject.showFirstStartWizzard != undefined) {
                    if (!hib.userobject.userPropsAsObject.showFirstStartWizzard) {
                        if ($debug) Debug.write("hib.userobject.userPropsAsObject.showFirstStartWizzard: IS STRING");
                    } else {
                        new lz.firstStartWizzard(canvas);
                    }
                }
            } else {
                new lz.firstStartWizzard(canvas);
            }
        
        ]]>
    </method>
     
	
	<command id="cmd_quit" onselect="canvas.doActionmenu('quit')" /> 
    <command id="cmd_open" onselect="canvas.doActionmenu('open')" /> 
    <command id="cmd_close" onselect="canvas.doActionmenu('close')" /> 
    
    <command id="cmd_new" onselect="canvas.doActionmenu('new')" /> 
    <command id="cmd_save" onselect="canvas.doActionmenu('save')" />
    <command id="cmd_save_as" onselect="canvas.doActionmenu('save_as')" />  
    
    <command id="cmd_print" onselect="canvas.doActionmenu('print')" /> 
    
    <command id="cmd_exportSVG" onselect="canvas.doActionmenu('exportSVG')" />
    <command id="cmd_exportPNG" onselect="canvas.doActionmenu('exportPNG')" /> 
    <command id="cmd_exportJPG" onselect="canvas.doActionmenu('exportJPG')" /> 
    <command id="cmd_exportPDF" onselect="canvas.doActionmenu('exportPDF')" /> 
    <command id="cmd_exportCustom" onselect="canvas.doActionmenu('exportCustom')" /> 
    <command id="cmd_exportXML" onselect="canvas.doActionmenu('exportXML')" /> 
    
    <command id="cmd_import" onselect="canvas.doActionmenu('importXML')" />
    
    <command id="cmd_showRoleExplorer" onselect="canvas.doActionmenu('showRoleExplorer')" /> 
    <command id="cmd_showRevisionHistory" onselect="canvas.doActionmenu('showRevisionHistory')" /> 
    <command id="cmd_showHierarchicalExplorer" onselect="canvas.doActionmenu('showHierarchicalExplorer')" />
    <command id="cmd_showProcessExplorer" onselect="canvas.doActionmenu('showProcessExplorer')" /> 
    <command id="cmd_showPropertyInspector" onselect="canvas.doActionmenu('showPropertyInspector')" /> 
    <command id="cmd_showRevisionHistoryProcess" onselect="canvas.doActionmenu('showRevisionHistoryProcess')" /> 
    <command id="cmd_showPropertyInspectorProcess" onselect="canvas.doActionmenu('showPropertyInspectorProcess')" /> 
    <command id="cmd_showRevisionHistoryHierarchical" onselect="canvas.doActionmenu('showRevisionHistoryHierarchical')" /> 
    <command id="cmd_showPropertyInspectorProcessHierarchical" onselect="canvas.doActionmenu('showPropertyInspectorProcessHierarchical')" /> 

    <!-- These are Observer-Pattern Like Functions for the Help System -->
    <method name="clearCurrentHelpIds">
        canvas.currentHelpArray = new Array();
    </method>

    <method name="checkCurrentHelpIds">
        return canvas.currentHelpArray;
    </method>
    
    <method name="addCurrentHelpId" args="helpId,helpName">
        <![CDATA[
	        for (var i=0;i<canvas.currentHelpArray.length;i++) {
	            if (canvas.currentHelpArray[i][0] == helpId) {
                    //Already on the List
                    return;
                }
            }
            canvas.currentHelpArray.push({0:helpId,1:helpName});
        ]]>
    </method>
    
    <method name="doDebug" args="itemList">
        if ($debug) Debug.write("%#file","%#line",itemList);
    </method>
    
    <method name="addToCurrentDiagramList" args="obj">
        if (canvas.currentDiagramList == null) canvas.currentDiagramList = new Array();
        this.currentDiagramList.push(obj);
    </method>
    
    <method name="removeFromCurrentDiagramList" args="obj">
        <![CDATA[
	        for (var i=0;i<this.currentDiagramList.length;i++) {
                if (this.currentDiagramList[i] == obj) {
                    this.currentDiagramList.splice(i,1);
                }
            }
        ]]>
    </method>

</library>
